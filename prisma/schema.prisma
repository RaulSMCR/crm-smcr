// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  // Si te funcionó mejor el engine binario en Windows, descomenta:
  // engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String
  identification String   @unique
  birthDate      DateTime
  gender         String?
  interests      String?
  phone          String
  passwordHash   String
  role           String   @default("USER")
  createdAt      DateTime @default(now())

  appointments Appointment[]
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  slug        String  @unique
  description String?
  imageUrl    String?

  services Service[]
}

model Service {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  description String   @db.Text
  price       Float
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Categoría opcional
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  // Relación M:N con profesionales
  professionals Professional[] @relation("ServicesOnProfessionals")

  // Posts que referencian este servicio (1:N)
  posts Post[]

  // Citas que referencian este servicio (nuevo, opcional)
  appointments Appointment[]
}

model Professional {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  name               String
  profession         String
  bio                String?
  avatarUrl          String?
  introVideoUrl      String?
  calendarUrl        String?
  paymentLinkBase    String?
  passwordHash       String   @default("placeholder_hash")
  isApproved         Boolean  @default(false)
  googleRefreshToken String?  @db.Text
  createdAt          DateTime @default(now())

  // Relación M:N con servicios
  services Service[] @relation("ServicesOnProfessionals")

  // Contenido
  posts Post[]

  // Citas
  appointments Appointment[]
}

model Post {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  title     String
  content   String   @db.Text
  imageUrl  String?
  postType  String   @default("TEXT") // "TEXT" | "VIDEO" | "AUDIO"
  mediaUrl  String?
  status    String   @default("PENDING") // "PENDING" | "PUBLISHED"
  createdAt DateTime @default(now())

  // Autor (profesional)
  authorId Int
  author   Professional @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Servicio opcional asociado
  serviceId Int?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@index([status, createdAt])
  @@index([serviceId])
}

model Appointment {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  status    String   @default("CONFIRMED")
  createdAt DateTime @default(now())

  // Quien reserva
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Con quién reserva (profesional)
  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  // NUEVO: servicio opcional del turno
  serviceId Int?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@index([professionalId, startTime])
  @@index([userId, startTime])
  @@index([serviceId])
}
